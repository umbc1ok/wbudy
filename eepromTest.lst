ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 1


   1              		.code	16
   2              		.file	"eepromTest.c"
   3              		.section	.debug_abbrev,"",%progbits
   4              	.Ldebug_abbrev0:
   5              		.section	.debug_info,"",%progbits
   6              	.Ldebug_info0:
   7              		.section	.debug_line,"",%progbits
   8              	.Ldebug_line0:
   9 0000 8D000000 		.text
   9      02004300 
   9      00000201 
   9      FB0E0D00 
   9      01010101 
  10              	.Ltext0:
  11              		.section	.rodata.str1.4,"aMS",%progbits,1
  12              		.align	2
  13              	.LC4:
  14 0000 0A546573 		.ascii	"\012Test #1 - write string '%s' to address 0x0000\000"
  14      74202331 
  14      202D2077 
  14      72697465 
  14      20737472 
  15 002f 00       		.align	2
  16              	.LC6:
  17 0030 0A202020 		.ascii	"\012        - failed (error code = %d)!\000"
  17      20202020 
  17      202D2066 
  17      61696C65 
  17      64202865 
  18 0055 000000   		.align	2
  19              	.LC8:
  20 0058 0A202020 		.ascii	"\012        - program cycle failed!\000"
  20      20202020 
  20      202D2070 
  20      726F6772 
  20      616D2063 
  21 0079 000000   		.align	2
  22              	.LC10:
  23 007c 0A546573 		.ascii	"\012Test #2 - write string '%s' to address 0x0040\000"
  23      74202332 
  23      202D2077 
  23      72697465 
  23      20737472 
  24 00ab 00       		.align	2
  25              	.LC12:
  26 00ac 0A546573 		.ascii	"\012Test #3 - read string from address 0x0000\000"
  26      74202333 
  26      202D2072 
  26      65616420 
  26      73747269 
  27 00d7 00       		.align	2
  28              	.LC14:
  29 00d8 0A202020 		.ascii	"\012        - wrong length (read string is %d chara"
  29      20202020 
  29      202D2077 
  29      726F6E67 
  29      206C656E 
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 2


  30 0108 63746572 		.ascii	"cters long)! %d\000"
  30      73206C6F 
  30      6E672921 
  30      20256400 
  31              		.align	2
  32              	.LC16:
  33 0118 0A25642C 		.ascii	"\012%d,%d,%d,%d,%d %d,%d,%d,%d,%d %d\000"
  33      25642C25 
  33      642C2564 
  33      2C256420 
  33      25642C25 
  34 013a 0000     		.align	2
  35              	.LC18:
  36 013c 0A256325 		.ascii	"\012%c%c%c%c%c%c%c%c%c%c%c\000"
  36      63256325 
  36      63256325 
  36      63256325 
  36      63256325 
  37              		.align	2
  38              	.LC20:
  39 0154 0A546573 		.ascii	"\012Test #4 - read string from address 0x0040\000"
  39      74202334 
  39      202D2072 
  39      65616420 
  39      73747269 
  40 017f 00       		.align	2
  41              	.LC22:
  42 0180 0A202020 		.ascii	"\012        - wrong length (read string is %d chara"
  42      20202020 
  42      202D2077 
  42      726F6E67 
  42      206C656E 
  43 01b0 63746572 		.ascii	"cters long)!\000"
  43      73206C6F 
  43      6E672921 
  43      00
  44 01bd 000000   		.align	2
  45              	.LC24:
  46 01c0 0A546573 		.ascii	"\012Test #4 - read string from address 0x00a0\000"
  46      74202334 
  46      202D2072 
  46      65616420 
  46      73747269 
  47 01eb 00       		.align	2
  48              	.LC26:
  49 01ec 0A546573 		.ascii	"\012Test #5 - write string '%s' to address 0x0004\000"
  49      74202335 
  49      202D2077 
  49      72697465 
  49      20737472 
  50 021b 00       		.align	2
  51              	.LC28:
  52 021c 0A546573 		.ascii	"\012Test #6 - read string from address 0x0000\000"
  52      74202336 
  52      202D2072 
  52      65616420 
  52      73747269 
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 3


  53 0247 00       		.align	2
  54              	.LC0:
  55 0248 53747269 		.ascii	"String #1\000"
  55      6E672023 
  55      3100
  56 0252 0000     		.align	2
  57              	.LC2:
  58 0254 73547249 		.ascii	"sTrInG #2\000"
  58      6E472023 
  58      3200
  59 025e 0000     		.text
  60              		.align	2
  61              		.global	testEEPROM
  62              		.code 16
  63              		.thumb_func
  64              		.type	testEEPROM, %function
  65              	testEEPROM:
  66              	.LFB2:
  67              		.file 1 "eepromTest.c"
   1:eepromTest.c  **** /******************************************************************************
   2:eepromTest.c  ****  *
   3:eepromTest.c  ****  * Copyright:
   4:eepromTest.c  ****  *    (C) 2005 Embedded Artists AB
   5:eepromTest.c  ****  *
   6:eepromTest.c  ****  * File:
   7:eepromTest.c  ****  *    eepromTest.c
   8:eepromTest.c  ****  *
   9:eepromTest.c  ****  *****************************************************************************/
  10:eepromTest.c  **** 
  11:eepromTest.c  **** /******************************************************************************
  12:eepromTest.c  ****  * Includes
  13:eepromTest.c  ****  *****************************************************************************/
  14:eepromTest.c  **** #include "pre_emptive_os/api/general.h"
  15:eepromTest.c  **** #include <lpc2xxx.h>
  16:eepromTest.c  **** #include "startup/config.h"
  17:eepromTest.c  **** #include <printf_P.h>
  18:eepromTest.c  **** #include "eeprom.h"
  19:eepromTest.c  **** #include <string.h>
  20:eepromTest.c  **** 
  21:eepromTest.c  **** 
  22:eepromTest.c  **** /******************************************************************************
  23:eepromTest.c  ****  * Defines and typedefs
  24:eepromTest.c  ****  *****************************************************************************/
  25:eepromTest.c  **** #define MAX_LENGTH 14
  26:eepromTest.c  **** 
  27:eepromTest.c  **** /*****************************************************************************
  28:eepromTest.c  ****  * Public function prototypes
  29:eepromTest.c  ****  ****************************************************************************/
  30:eepromTest.c  **** 
  31:eepromTest.c  **** /*****************************************************************************
  32:eepromTest.c  ****  *
  33:eepromTest.c  ****  * Description:
  34:eepromTest.c  ****  *    Test EEPROM
  35:eepromTest.c  ****  *
  36:eepromTest.c  ****  ****************************************************************************/
  37:eepromTest.c  **** tU8
  38:eepromTest.c  **** testEEPROM(void)
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 4


  39:eepromTest.c  **** {
  68              		.loc 1 39 0
  69 0000 70B5     		push	{r4, r5, r6, lr}
  70              	.LCFI0:
  71 0002 91B0     		sub	sp, sp, #68
  72              	.LCFI1:
  40:eepromTest.c  ****   tU8 eepromTestResultOK;
  41:eepromTest.c  ****   tU8 testString1[] = "String #1";
  73              		.loc 1 41 0
  74 0004 6D46     		mov	r5, sp
  75 0006 3A35     		add	r5, r5, #58
  76 0008 8449     		ldr	r1, .L31
  77 000a 0A22     		mov	r2, #10
  78 000c 281C     		mov	r0, r5
  79 000e FFF7FEFF 		bl	memcpy
  42:eepromTest.c  ****   tU8 testString2[] = "sTrInG #2";
  80              		.loc 1 42 0
  81 0012 834B     		ldr	r3, .L31+4
  82 0014 0CAA     		add	r2, sp, #48
  83 0016 101C     		mov	r0, r2
  84 0018 191C     		mov	r1, r3
  85 001a 50C9     		ldmia	r1!, {r4, r6}
  86 001c 50C0     		stmia	r0!, {r4, r6}
  87 001e 1B89     		ldrh	r3, [r3, #8]
  43:eepromTest.c  ****   tU8 testBuf[MAX_LENGTH];
  44:eepromTest.c  ****   tS8 errorCode;
  45:eepromTest.c  ****   
  46:eepromTest.c  ****   eepromTestResultOK = TRUE;
  47:eepromTest.c  **** //  printf("\nTest #1 - write string '%s' to address 0x0000", testString1);
  48:eepromTest.c  ****   errorCode = eepromWrite(0x0000, testString1, sizeof(testString1));
  88              		.loc 1 48 0
  89 0020 0020     		mov	r0, #0
  90              		.loc 1 42 0
  91 0022 1381     		strh	r3, [r2, #8]
  92              		.loc 1 48 0
  93 0024 291C     		mov	r1, r5
  94 0026 0A22     		mov	r2, #10
  95 0028 FFF7FEFF 		bl	eepromWrite
  49:eepromTest.c  ****   if (errorCode == I2C_CODE_OK)
  96              		.loc 1 49 0
  97 002c 0006     		lsl	r0, r0, #24
  98 002e 0416     		asr	r4, r0, #24
  99 0030 012C     		cmp	r4, #1
 100 0032 01D1     		bne	.L2
 101 0034 0126     		mov	r6, #1
 102              	.LVL0:
 103 0036 08E0     		b	.L4
 104              	.LVL1:
 105              	.L2:
  50:eepromTest.c  **** ;//    printf("\n        - done (status code OK)");
  51:eepromTest.c  ****   else
  52:eepromTest.c  ****   {
  53:eepromTest.c  ****     printf("\nTest #1 - write string '%s' to address 0x0000", testString1);
 106              		.loc 1 53 0
 107 0038 7A48     		ldr	r0, .L31+8
 108 003a 291C     		mov	r1, r5
 109 003c FFF7FEFF 		bl	simplePrintf
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 5


  54:eepromTest.c  ****     printf("\n        - failed (error code = %d)!", errorCode);
 110              		.loc 1 54 0
 111 0040 7948     		ldr	r0, .L31+12
 112 0042 211C     		mov	r1, r4
 113 0044 FFF7FEFF 		bl	simplePrintf
 114 0048 0026     		mov	r6, #0
 115              	.LVL2:
 116              	.L4:
  55:eepromTest.c  ****     eepromTestResultOK = FALSE;
  56:eepromTest.c  ****   }
  57:eepromTest.c  ****   
  58:eepromTest.c  ****   if (eepromPoll() == I2C_CODE_OK)
 117              		.loc 1 58 0
 118 004a FFF7FEFF 		bl	eepromPoll
 119 004e 0006     		lsl	r0, r0, #24
 120 0050 0016     		asr	r0, r0, #24
 121 0052 0128     		cmp	r0, #1
 122 0054 08D0     		beq	.L5
  59:eepromTest.c  **** ;//    printf("\n        - program cycle completed");
  60:eepromTest.c  ****   else
  61:eepromTest.c  ****   {
  62:eepromTest.c  ****     printf("\nTest #1 - write string '%s' to address 0x0000", testString1);
 123              		.loc 1 62 0
 124 0056 6946     		mov	r1, sp
 125 0058 7248     		ldr	r0, .L31+8
 126 005a 3A31     		add	r1, r1, #58
 127 005c FFF7FEFF 		bl	simplePrintf
  63:eepromTest.c  ****     printf("\n        - program cycle failed!");
 128              		.loc 1 63 0
 129 0060 7248     		ldr	r0, .L31+16
 130 0062 FFF7FEFF 		bl	simplePrintf
 131 0066 0026     		mov	r6, #0
 132              	.L5:
  64:eepromTest.c  ****     eepromTestResultOK = FALSE;
  65:eepromTest.c  ****   }
  66:eepromTest.c  **** 
  67:eepromTest.c  **** //  printf("\nTest #2 - write string '%s' to address 0x0040", testString2);
  68:eepromTest.c  ****   errorCode = eepromWrite(0x0040, testString2, sizeof(testString2));
 133              		.loc 1 68 0
 134 0068 0CAD     		add	r5, sp, #48
 135 006a 4020     		mov	r0, #64
 136 006c 291C     		mov	r1, r5
 137 006e 0A22     		mov	r2, #10
 138 0070 FFF7FEFF 		bl	eepromWrite
  69:eepromTest.c  ****   if (errorCode == I2C_CODE_OK)
 139              		.loc 1 69 0
 140 0074 0006     		lsl	r0, r0, #24
 141 0076 0416     		asr	r4, r0, #24
 142 0078 012C     		cmp	r4, #1
 143 007a 08D0     		beq	.L7
  70:eepromTest.c  **** ;//    printf("\n        - done (status code OK)");
  71:eepromTest.c  ****   else
  72:eepromTest.c  ****   {
  73:eepromTest.c  ****   	printf("\nTest #2 - write string '%s' to address 0x0040", testString2);
 144              		.loc 1 73 0
 145 007c 6C48     		ldr	r0, .L31+20
 146 007e 291C     		mov	r1, r5
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 6


 147 0080 FFF7FEFF 		bl	simplePrintf
  74:eepromTest.c  ****     printf("\n        - failed (error code = %d)!", errorCode);
 148              		.loc 1 74 0
 149 0084 6848     		ldr	r0, .L31+12
 150 0086 211C     		mov	r1, r4
 151 0088 FFF7FEFF 		bl	simplePrintf
 152 008c 0026     		mov	r6, #0
 153              	.L7:
  75:eepromTest.c  ****     eepromTestResultOK = FALSE;
  76:eepromTest.c  ****   }
  77:eepromTest.c  ****    
  78:eepromTest.c  ****   if (eepromPoll() == I2C_CODE_OK)
 154              		.loc 1 78 0
 155 008e FFF7FEFF 		bl	eepromPoll
 156 0092 0006     		lsl	r0, r0, #24
 157 0094 0016     		asr	r0, r0, #24
 158 0096 0128     		cmp	r0, #1
 159 0098 07D0     		beq	.L9
  79:eepromTest.c  **** ;//    printf("\n        - program cycle completed");
  80:eepromTest.c  ****   else
  81:eepromTest.c  ****   {
  82:eepromTest.c  ****   	printf("\nTest #2 - write string '%s' to address 0x0040", testString2);
 160              		.loc 1 82 0
 161 009a 6548     		ldr	r0, .L31+20
 162 009c 291C     		mov	r1, r5
 163 009e FFF7FEFF 		bl	simplePrintf
  83:eepromTest.c  ****     printf("\n        - program cycle failed!");
 164              		.loc 1 83 0
 165 00a2 6248     		ldr	r0, .L31+16
 166 00a4 FFF7FEFF 		bl	simplePrintf
 167 00a8 0026     		mov	r6, #0
 168              	.L9:
  84:eepromTest.c  ****     eepromTestResultOK = FALSE;
  85:eepromTest.c  ****   }
  86:eepromTest.c  **** 
  87:eepromTest.c  ****   /*
  88:eepromTest.c  ****    * Read from eeprom
  89:eepromTest.c  ****    */
  90:eepromTest.c  **** //  printf("\nTest #3 - read string from address 0x0000");
  91:eepromTest.c  ****   errorCode = eepromPageRead(0x0000, testBuf, MAX_LENGTH);
 169              		.loc 1 91 0
 170 00aa 6D46     		mov	r5, sp
 171 00ac 2235     		add	r5, r5, #34
 172 00ae 0020     		mov	r0, #0
 173 00b0 291C     		mov	r1, r5
 174 00b2 0E22     		mov	r2, #14
 175 00b4 FFF7FEFF 		bl	eepromPageRead
  92:eepromTest.c  ****   if (errorCode == I2C_CODE_OK)
 176              		.loc 1 92 0
 177 00b8 0006     		lsl	r0, r0, #24
 178 00ba 0416     		asr	r4, r0, #24
 179 00bc 012C     		cmp	r4, #1
 180 00be 3CD1     		bne	.L11
  93:eepromTest.c  ****   {
  94:eepromTest.c  ****     if (strlen(testBuf) == sizeof(testString1)-1)
 181              		.loc 1 94 0
 182 00c0 281C     		mov	r0, r5
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 7


 183 00c2 FFF7FEFF 		bl	strlen
 184 00c6 0928     		cmp	r0, #9
 185 00c8 3FD0     		beq	.L13
  95:eepromTest.c  **** ;//      printf("\n        - string is '%s'", testBuf);
  96:eepromTest.c  ****     else
  97:eepromTest.c  ****     {
  98:eepromTest.c  ****     	printf("\nTest #3 - read string from address 0x0000");
 186              		.loc 1 98 0
 187 00ca 5A48     		ldr	r0, .L31+24
 188 00cc FFF7FEFF 		bl	simplePrintf
  99:eepromTest.c  ****       printf("\n        - wrong length (read string is %d characters long)! %d", strlen(testBuf),  
 189              		.loc 1 99 0
 190 00d0 281C     		mov	r0, r5
 191 00d2 FFF7FEFF 		bl	strlen
 192 00d6 0922     		mov	r2, #9
 193 00d8 011C     		mov	r1, r0
 194 00da 5748     		ldr	r0, .L31+28
 195 00dc FFF7FEFF 		bl	simplePrintf
 100:eepromTest.c  **** 
 101:eepromTest.c  ****       printf("\n%d,%d,%d,%d,%d %d,%d,%d,%d,%d %d",
 196              		.loc 1 101 0
 197 00e0 EC78     		ldrb	r4, [r5, #3]
 198 00e2 2978     		ldrb	r1, [r5]
 199 00e4 6A78     		ldrb	r2, [r5, #1]
 200 00e6 AB78     		ldrb	r3, [r5, #2]
 201 00e8 0094     		str	r4, [sp]
 202 00ea 2C79     		ldrb	r4, [r5, #4]
 203 00ec 0194     		str	r4, [sp, #4]
 204 00ee 6C79     		ldrb	r4, [r5, #5]
 205 00f0 0294     		str	r4, [sp, #8]
 206 00f2 AC79     		ldrb	r4, [r5, #6]
 207 00f4 0394     		str	r4, [sp, #12]
 208 00f6 EC79     		ldrb	r4, [r5, #7]
 209 00f8 0494     		str	r4, [sp, #16]
 210 00fa 2C7A     		ldrb	r4, [r5, #8]
 211 00fc 0594     		str	r4, [sp, #20]
 212 00fe 6C7A     		ldrb	r4, [r5, #9]
 213 0100 0694     		str	r4, [sp, #24]
 214 0102 AC7A     		ldrb	r4, [r5, #10]
 215 0104 4D48     		ldr	r0, .L31+32
 216 0106 0794     		str	r4, [sp, #28]
 217 0108 FFF7FEFF 		bl	simplePrintf
 102:eepromTest.c  ****              testBuf[0],testBuf[1],testBuf[2],testBuf[3],testBuf[4],testBuf[5],testBuf[6],testBuf[7
 103:eepromTest.c  ****       printf("\n%c%c%c%c%c%c%c%c%c%c%c",
 218              		.loc 1 103 0
 219 010c EC78     		ldrb	r4, [r5, #3]
 220 010e 2978     		ldrb	r1, [r5]
 221 0110 6A78     		ldrb	r2, [r5, #1]
 222 0112 AB78     		ldrb	r3, [r5, #2]
 223 0114 0094     		str	r4, [sp]
 224 0116 2C79     		ldrb	r4, [r5, #4]
 225 0118 0194     		str	r4, [sp, #4]
 226 011a 6C79     		ldrb	r4, [r5, #5]
 227 011c 0294     		str	r4, [sp, #8]
 228 011e AC79     		ldrb	r4, [r5, #6]
 229 0120 0394     		str	r4, [sp, #12]
 230 0122 EC79     		ldrb	r4, [r5, #7]
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 8


 231 0124 0494     		str	r4, [sp, #16]
 232 0126 2C7A     		ldrb	r4, [r5, #8]
 233 0128 0594     		str	r4, [sp, #20]
 234 012a 6C7A     		ldrb	r4, [r5, #9]
 235 012c 0694     		str	r4, [sp, #24]
 236 012e AC7A     		ldrb	r4, [r5, #10]
 237 0130 4348     		ldr	r0, .L31+36
 238 0132 0794     		str	r4, [sp, #28]
 239 0134 FFF7FEFF 		bl	simplePrintf
 240 0138 06E0     		b	.L28
 241              	.L11:
 104:eepromTest.c  ****              testBuf[0],testBuf[1],testBuf[2],testBuf[3],testBuf[4],testBuf[5],testBuf[6],testBuf[7
 105:eepromTest.c  **** 
 106:eepromTest.c  ****       eepromTestResultOK = FALSE;
 107:eepromTest.c  ****     }
 108:eepromTest.c  ****   }
 109:eepromTest.c  ****   else
 110:eepromTest.c  ****   {
 111:eepromTest.c  ****   	printf("\nTest #3 - read string from address 0x0000");
 242              		.loc 1 111 0
 243 013a 3E48     		ldr	r0, .L31+24
 244 013c FFF7FEFF 		bl	simplePrintf
 112:eepromTest.c  ****     printf("\n        - failed (error code = %d)!", errorCode);
 245              		.loc 1 112 0
 246 0140 3948     		ldr	r0, .L31+12
 247 0142 211C     		mov	r1, r4
 248 0144 FFF7FEFF 		bl	simplePrintf
 249              	.L28:
 250 0148 0026     		mov	r6, #0
 251              	.L13:
 113:eepromTest.c  ****     eepromTestResultOK = FALSE;
 114:eepromTest.c  ****   }
 115:eepromTest.c  **** 
 116:eepromTest.c  **** //  printf("\nTest #4 - read string from address 0x0040");
 117:eepromTest.c  ****   errorCode = eepromPageRead(0x0040, testBuf, MAX_LENGTH);
 252              		.loc 1 117 0
 253 014a 6D46     		mov	r5, sp
 254 014c 2235     		add	r5, r5, #34
 255 014e 4020     		mov	r0, #64
 256 0150 291C     		mov	r1, r5
 257 0152 0E22     		mov	r2, #14
 258 0154 FFF7FEFF 		bl	eepromPageRead
 118:eepromTest.c  ****   if (errorCode == I2C_CODE_OK)
 259              		.loc 1 118 0
 260 0158 0006     		lsl	r0, r0, #24
 261 015a 0416     		asr	r4, r0, #24
 262 015c 012C     		cmp	r4, #1
 263 015e 0DD1     		bne	.L15
 119:eepromTest.c  ****   {
 120:eepromTest.c  ****     if (strlen(testBuf) == sizeof(testString2)-1)
 264              		.loc 1 120 0
 265 0160 281C     		mov	r0, r5
 266 0162 FFF7FEFF 		bl	strlen
 267 0166 0928     		cmp	r0, #9
 268 0168 10D0     		beq	.L17
 121:eepromTest.c  **** ;//      printf("\n        - string is '%s'", testBuf);
 122:eepromTest.c  ****     else
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 9


 123:eepromTest.c  ****     {
 124:eepromTest.c  ****     	printf("\nTest #4 - read string from address 0x0040");
 269              		.loc 1 124 0
 270 016a 3648     		ldr	r0, .L31+40
 271 016c FFF7FEFF 		bl	simplePrintf
 125:eepromTest.c  ****       printf("\n        - wrong length (read string is %d characters long)!", strlen(testBuf));
 272              		.loc 1 125 0
 273 0170 281C     		mov	r0, r5
 274 0172 FFF7FEFF 		bl	strlen
 275 0176 011C     		mov	r1, r0
 276 0178 3348     		ldr	r0, .L31+44
 277 017a 04E0     		b	.L29
 278              	.L15:
 126:eepromTest.c  ****       eepromTestResultOK = FALSE;
 127:eepromTest.c  ****     }
 128:eepromTest.c  ****   }
 129:eepromTest.c  ****   else
 130:eepromTest.c  ****   {
 131:eepromTest.c  ****   	printf("\nTest #4 - read string from address 0x00a0");
 279              		.loc 1 131 0
 280 017c 3348     		ldr	r0, .L31+48
 281 017e FFF7FEFF 		bl	simplePrintf
 132:eepromTest.c  ****     printf("\n        - failed (error code = %d)!", errorCode);
 282              		.loc 1 132 0
 283 0182 2948     		ldr	r0, .L31+12
 284 0184 211C     		mov	r1, r4
 285              	.L29:
 286 0186 FFF7FEFF 		bl	simplePrintf
 287 018a 0026     		mov	r6, #0
 288              	.L17:
 133:eepromTest.c  ****     eepromTestResultOK = FALSE;
 134:eepromTest.c  ****   }
 135:eepromTest.c  **** 
 136:eepromTest.c  ****   /*
 137:eepromTest.c  ****    * Write/Read from eeprom
 138:eepromTest.c  ****    */
 139:eepromTest.c  **** //  printf("\nTest #5 - write string '%s' to address 0x0004", testString2);
 140:eepromTest.c  ****   errorCode = eepromWrite(0x0004, testString2, sizeof(testString2));
 289              		.loc 1 140 0
 290 018c 0CAD     		add	r5, sp, #48
 291 018e 0420     		mov	r0, #4
 292 0190 291C     		mov	r1, r5
 293 0192 0A22     		mov	r2, #10
 294 0194 FFF7FEFF 		bl	eepromWrite
 141:eepromTest.c  ****   if (errorCode == I2C_CODE_OK)
 295              		.loc 1 141 0
 296 0198 0006     		lsl	r0, r0, #24
 297 019a 0416     		asr	r4, r0, #24
 298 019c 012C     		cmp	r4, #1
 299 019e 08D0     		beq	.L19
 142:eepromTest.c  **** ;//    printf("\n        - done (status code OK)");
 143:eepromTest.c  ****   else
 144:eepromTest.c  ****   {
 145:eepromTest.c  ****   	printf("\nTest #5 - write string '%s' to address 0x0004", testString2);
 300              		.loc 1 145 0
 301 01a0 2B48     		ldr	r0, .L31+52
 302 01a2 291C     		mov	r1, r5
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 10


 303 01a4 FFF7FEFF 		bl	simplePrintf
 146:eepromTest.c  ****     printf("\n        - failed (error code = %d)!", errorCode);
 304              		.loc 1 146 0
 305 01a8 1F48     		ldr	r0, .L31+12
 306 01aa 211C     		mov	r1, r4
 307 01ac FFF7FEFF 		bl	simplePrintf
 308 01b0 0026     		mov	r6, #0
 309              	.L19:
 147:eepromTest.c  ****     eepromTestResultOK = FALSE;
 148:eepromTest.c  ****   }
 149:eepromTest.c  ****   
 150:eepromTest.c  ****   if (eepromPoll() == I2C_CODE_OK)
 310              		.loc 1 150 0
 311 01b2 FFF7FEFF 		bl	eepromPoll
 312 01b6 0006     		lsl	r0, r0, #24
 313 01b8 0016     		asr	r0, r0, #24
 314 01ba 0128     		cmp	r0, #1
 315 01bc 07D0     		beq	.L21
 151:eepromTest.c  **** ;//    printf("\n        - program cycle completed");
 152:eepromTest.c  ****   else
 153:eepromTest.c  ****   {
 154:eepromTest.c  ****   	printf("\nTest #5 - write string '%s' to address 0x0004", testString2);
 316              		.loc 1 154 0
 317 01be 2448     		ldr	r0, .L31+52
 318 01c0 291C     		mov	r1, r5
 319 01c2 FFF7FEFF 		bl	simplePrintf
 155:eepromTest.c  ****     printf("\n        - program cycle failed!");
 320              		.loc 1 155 0
 321 01c6 1948     		ldr	r0, .L31+16
 322 01c8 FFF7FEFF 		bl	simplePrintf
 323 01cc 0026     		mov	r6, #0
 324              	.L21:
 156:eepromTest.c  ****     eepromTestResultOK = FALSE;
 157:eepromTest.c  ****   }
 158:eepromTest.c  **** 
 159:eepromTest.c  **** //  printf("\nTest #6 - read string from address 0x0000");
 160:eepromTest.c  ****   errorCode = eepromPageRead(0x0000, testBuf, MAX_LENGTH);
 325              		.loc 1 160 0
 326 01ce 6D46     		mov	r5, sp
 327 01d0 2235     		add	r5, r5, #34
 328 01d2 0020     		mov	r0, #0
 329 01d4 291C     		mov	r1, r5
 330 01d6 0E22     		mov	r2, #14
 331 01d8 FFF7FEFF 		bl	eepromPageRead
 161:eepromTest.c  ****   if (errorCode == I2C_CODE_OK)
 332              		.loc 1 161 0
 333 01dc 0006     		lsl	r0, r0, #24
 334 01de 0416     		asr	r4, r0, #24
 335 01e0 012C     		cmp	r4, #1
 336 01e2 0DD1     		bne	.L23
 162:eepromTest.c  ****   {
 163:eepromTest.c  ****     if (strlen(testBuf) == sizeof(testString2)-1+4)
 337              		.loc 1 163 0
 338 01e4 281C     		mov	r0, r5
 339 01e6 FFF7FEFF 		bl	strlen
 340 01ea 0D28     		cmp	r0, #13
 341 01ec 10D0     		beq	.L25
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 11


 164:eepromTest.c  **** ;//      printf("\n        - string is '%s'", testBuf);
 165:eepromTest.c  ****     else
 166:eepromTest.c  ****     {
 167:eepromTest.c  ****     	printf("\nTest #6 - read string from address 0x0000");
 342              		.loc 1 167 0
 343 01ee 1948     		ldr	r0, .L31+56
 344 01f0 FFF7FEFF 		bl	simplePrintf
 168:eepromTest.c  ****       printf("\n        - wrong length (read string is %d characters long)!", strlen(testBuf));
 345              		.loc 1 168 0
 346 01f4 281C     		mov	r0, r5
 347 01f6 FFF7FEFF 		bl	strlen
 348 01fa 011C     		mov	r1, r0
 349 01fc 1248     		ldr	r0, .L31+44
 350 01fe 04E0     		b	.L30
 351              	.L23:
 169:eepromTest.c  ****       eepromTestResultOK = FALSE;
 170:eepromTest.c  ****     }
 171:eepromTest.c  ****   }
 172:eepromTest.c  ****   else
 173:eepromTest.c  ****   {
 174:eepromTest.c  ****   	printf("\nTest #6 - read string from address 0x0000");
 352              		.loc 1 174 0
 353 0200 1448     		ldr	r0, .L31+56
 354 0202 FFF7FEFF 		bl	simplePrintf
 175:eepromTest.c  ****     printf("\n        - failed (error code = %d)!", errorCode);
 355              		.loc 1 175 0
 356 0206 0848     		ldr	r0, .L31+12
 357 0208 211C     		mov	r1, r4
 358              	.L30:
 359 020a FFF7FEFF 		bl	simplePrintf
 360 020e 0026     		mov	r6, #0
 361              	.L25:
 176:eepromTest.c  ****     eepromTestResultOK = FALSE;
 177:eepromTest.c  ****   }
 178:eepromTest.c  ****   
 179:eepromTest.c  ****   return eepromTestResultOK;
 180:eepromTest.c  **** }
 362              		.loc 1 180 0
 363 0210 301C     		mov	r0, r6
 364 0212 11B0     		add	sp, sp, #68
 365              		@ sp needed for prologue
 366              	.LVL3:
 367 0214 70BC     		pop	{r4, r5, r6}
 368 0216 02BC     		pop	{r1}
 369 0218 0847     		bx	r1
 370              	.L32:
 371 021a C046     		.align	2
 372              	.L31:
 373 021c 48020000 		.word	.LC0
 374 0220 54020000 		.word	.LC2
 375 0224 00000000 		.word	.LC4
 376 0228 30000000 		.word	.LC6
 377 022c 58000000 		.word	.LC8
 378 0230 7C000000 		.word	.LC10
 379 0234 AC000000 		.word	.LC12
 380 0238 D8000000 		.word	.LC14
 381 023c 18010000 		.word	.LC16
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 12


 382 0240 3C010000 		.word	.LC18
 383 0244 54010000 		.word	.LC20
 384 0248 80010000 		.word	.LC22
 385 024c C0010000 		.word	.LC24
 386 0250 EC010000 		.word	.LC26
 387 0254 1C020000 		.word	.LC28
 388              	.LFE2:
 389              		.size	testEEPROM, .-testEEPROM
 390              		.section	.debug_frame,"",%progbits
 391              	.Lframe0:
 392 0000 0C000000 		.4byte	.LECIE0-.LSCIE0
 393              	.LSCIE0:
 394 0004 FFFFFFFF 		.4byte	0xffffffff
 395 0008 01       		.byte	0x1
 396 0009 00       		.ascii	"\000"
 397 000a 01       		.uleb128 0x1
 398 000b 7C       		.sleb128 -4
 399 000c 0E       		.byte	0xe
 400 000d 0C       		.byte	0xc
 401 000e 0D       		.uleb128 0xd
 402 000f 00       		.uleb128 0x0
 403              		.align	2
 404              	.LECIE0:
 405              	.LSFDE0:
 406 0010 1C000000 		.4byte	.LEFDE0-.LASFDE0
 407              	.LASFDE0:
 408 0014 00000000 		.4byte	.Lframe0
 409 0018 00000000 		.4byte	.LFB2
 410 001c 58020000 		.4byte	.LFE2-.LFB2
 411 0020 42       		.byte	0x4
 412              		.4byte	.LCFI0-.LFB2
 413 0021 0E       		.byte	0xe
 414 0022 10       		.uleb128 0x10
 415 0023 84       		.byte	0x84
 416 0024 04       		.uleb128 0x4
 417 0025 85       		.byte	0x85
 418 0026 03       		.uleb128 0x3
 419 0027 86       		.byte	0x86
 420 0028 02       		.uleb128 0x2
 421 0029 8E       		.byte	0x8e
 422 002a 01       		.uleb128 0x1
 423 002b 42       		.byte	0x4
 424              		.4byte	.LCFI1-.LCFI0
 425 002c 0E       		.byte	0xe
 426 002d 54       		.uleb128 0x54
 427 002e 0000     		.align	2
 428              	.LEFDE0:
 429              		.text
 430              	.Letext0:
 431              		.section	.debug_loc,"",%progbits
 432              	.Ldebug_loc0:
 433              	.LLST0:
 434 0000 00000000 		.4byte	.LFB2-.Ltext0
 435 0004 02000000 		.4byte	.LCFI0-.Ltext0
 436 0008 0100     		.2byte	0x1
 437 000a 5D       		.byte	0x5d
 438 000b 02000000 		.4byte	.LCFI0-.Ltext0
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 13


 439 000f 04000000 		.4byte	.LCFI1-.Ltext0
 440 0013 0200     		.2byte	0x2
 441 0015 7D       		.byte	0x7d
 442 0016 10       		.sleb128 16
 443 0017 04000000 		.4byte	.LCFI1-.Ltext0
 444 001b 58020000 		.4byte	.LFE2-.Ltext0
 445 001f 0300     		.2byte	0x3
 446 0021 7D       		.byte	0x7d
 447 0022 D400     		.sleb128 84
 448 0024 00000000 		.4byte	0x0
 449 0028 00000000 		.4byte	0x0
 450              	.LLST1:
 451 002c 36000000 		.4byte	.LVL0-.Ltext0
 452 0030 38000000 		.4byte	.LVL1-.Ltext0
 453 0034 0100     		.2byte	0x1
 454 0036 56       		.byte	0x56
 455 0037 4A000000 		.4byte	.LVL2-.Ltext0
 456 003b 14020000 		.4byte	.LVL3-.Ltext0
 457 003f 0100     		.2byte	0x1
 458 0041 56       		.byte	0x56
 459 0042 00000000 		.4byte	0x0
 460 0046 00000000 		.4byte	0x0
 461              		.file 2 "pre_emptive_os/api/general.h"
 462              		.section	.debug_info
 463 0000 16010000 		.4byte	0x116
 464 0004 0200     		.2byte	0x2
 465 0006 00000000 		.4byte	.Ldebug_abbrev0
 466 000a 04       		.byte	0x4
 467 000b 01       		.uleb128 0x1
 468 000c 50000000 		.4byte	.LASF14
 469 0010 01       		.byte	0x1
 470 0011 94000000 		.4byte	.LASF15
 471 0015 E0000000 		.4byte	.LASF16
 472 0019 00000000 		.4byte	.Ltext0
 473 001d 58020000 		.4byte	.Letext0
 474 0021 00000000 		.4byte	.Ldebug_line0
 475 0025 02       		.uleb128 0x2
 476 0026 74553800 		.ascii	"tU8\000"
 477 002a 02       		.byte	0x2
 478 002b 47       		.byte	0x47
 479 002c 30000000 		.4byte	0x30
 480 0030 03       		.uleb128 0x3
 481 0031 01       		.byte	0x1
 482 0032 08       		.byte	0x8
 483 0033 86000000 		.4byte	.LASF0
 484 0037 03       		.uleb128 0x3
 485 0038 02       		.byte	0x2
 486 0039 07       		.byte	0x7
 487 003a C1000000 		.4byte	.LASF1
 488 003e 03       		.uleb128 0x3
 489 003f 04       		.byte	0x4
 490 0040 07       		.byte	0x7
 491 0041 21000000 		.4byte	.LASF2
 492 0045 02       		.uleb128 0x2
 493 0046 74533800 		.ascii	"tS8\000"
 494 004a 02       		.byte	0x2
 495 004b 4A       		.byte	0x4a
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 14


 496 004c 50000000 		.4byte	0x50
 497 0050 03       		.uleb128 0x3
 498 0051 01       		.byte	0x1
 499 0052 06       		.byte	0x6
 500 0053 D4000000 		.4byte	.LASF3
 501 0057 03       		.uleb128 0x3
 502 0058 02       		.byte	0x2
 503 0059 05       		.byte	0x5
 504 005a 6C010000 		.4byte	.LASF4
 505 005e 04       		.uleb128 0x4
 506 005f 04       		.byte	0x4
 507 0060 05       		.byte	0x5
 508 0061 696E7400 		.ascii	"int\000"
 509 0065 03       		.uleb128 0x3
 510 0066 04       		.byte	0x4
 511 0067 05       		.byte	0x5
 512 0068 A6000000 		.4byte	.LASF5
 513 006c 03       		.uleb128 0x3
 514 006d 08       		.byte	0x8
 515 006e 05       		.byte	0x5
 516 006f 00000000 		.4byte	.LASF6
 517 0073 05       		.uleb128 0x5
 518 0074 04       		.byte	0x4
 519 0075 07       		.byte	0x7
 520 0076 03       		.uleb128 0x3
 521 0077 04       		.byte	0x4
 522 0078 07       		.byte	0x7
 523 0079 AF000000 		.4byte	.LASF7
 524 007d 03       		.uleb128 0x3
 525 007e 01       		.byte	0x1
 526 007f 08       		.byte	0x8
 527 0080 A1000000 		.4byte	.LASF8
 528 0084 03       		.uleb128 0x3
 529 0085 08       		.byte	0x8
 530 0086 07       		.byte	0x7
 531 0087 5C000000 		.4byte	.LASF9
 532 008b 06       		.uleb128 0x6
 533 008c 01       		.byte	0x1
 534 008d 7B000000 		.4byte	.LASF17
 535 0091 01       		.byte	0x1
 536 0092 27       		.byte	0x27
 537 0093 01       		.byte	0x1
 538 0094 25000000 		.4byte	0x25
 539 0098 00000000 		.4byte	.LFB2
 540 009c 58020000 		.4byte	.LFE2
 541 00a0 00000000 		.4byte	.LLST0
 542 00a4 ED000000 		.4byte	0xed
 543 00a8 07       		.uleb128 0x7
 544 00a9 0E000000 		.4byte	.LASF10
 545 00ad 01       		.byte	0x1
 546 00ae 28       		.byte	0x28
 547 00af 25000000 		.4byte	0x25
 548 00b3 2C000000 		.4byte	.LLST1
 549 00b7 08       		.uleb128 0x8
 550 00b8 2E000000 		.4byte	.LASF11
 551 00bc 01       		.byte	0x1
 552 00bd 29       		.byte	0x29
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 15


 553 00be ED000000 		.4byte	0xed
 554 00c2 02       		.byte	0x2
 555 00c3 91       		.byte	0x91
 556 00c4 66       		.sleb128 -26
 557 00c5 08       		.uleb128 0x8
 558 00c6 3A000000 		.4byte	.LASF12
 559 00ca 01       		.byte	0x1
 560 00cb 2A       		.byte	0x2a
 561 00cc FD000000 		.4byte	0xfd
 562 00d0 02       		.byte	0x2
 563 00d1 91       		.byte	0x91
 564 00d2 5C       		.sleb128 -36
 565 00d3 08       		.uleb128 0x8
 566 00d4 73000000 		.4byte	.LASF13
 567 00d8 01       		.byte	0x1
 568 00d9 2B       		.byte	0x2b
 569 00da 0D010000 		.4byte	0x10d
 570 00de 02       		.byte	0x2
 571 00df 91       		.byte	0x91
 572 00e0 4E       		.sleb128 -50
 573 00e1 09       		.uleb128 0x9
 574 00e2 46000000 		.4byte	.LASF18
 575 00e6 01       		.byte	0x1
 576 00e7 2C       		.byte	0x2c
 577 00e8 45000000 		.4byte	0x45
 578 00ec 00       		.byte	0x0
 579 00ed 0A       		.uleb128 0xa
 580 00ee 25000000 		.4byte	0x25
 581 00f2 FD000000 		.4byte	0xfd
 582 00f6 0B       		.uleb128 0xb
 583 00f7 73000000 		.4byte	0x73
 584 00fb 09       		.byte	0x9
 585 00fc 00       		.byte	0x0
 586 00fd 0A       		.uleb128 0xa
 587 00fe 25000000 		.4byte	0x25
 588 0102 0D010000 		.4byte	0x10d
 589 0106 0B       		.uleb128 0xb
 590 0107 73000000 		.4byte	0x73
 591 010b 09       		.byte	0x9
 592 010c 00       		.byte	0x0
 593 010d 0C       		.uleb128 0xc
 594 010e 25000000 		.4byte	0x25
 595 0112 0B       		.uleb128 0xb
 596 0113 73000000 		.4byte	0x73
 597 0117 0D       		.byte	0xd
 598 0118 00       		.byte	0x0
 599 0119 00       		.byte	0x0
 600              		.section	.debug_abbrev
 601 0000 01       		.uleb128 0x1
 602 0001 11       		.uleb128 0x11
 603 0002 01       		.byte	0x1
 604 0003 25       		.uleb128 0x25
 605 0004 0E       		.uleb128 0xe
 606 0005 13       		.uleb128 0x13
 607 0006 0B       		.uleb128 0xb
 608 0007 03       		.uleb128 0x3
 609 0008 0E       		.uleb128 0xe
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 16


 610 0009 1B       		.uleb128 0x1b
 611 000a 0E       		.uleb128 0xe
 612 000b 11       		.uleb128 0x11
 613 000c 01       		.uleb128 0x1
 614 000d 12       		.uleb128 0x12
 615 000e 01       		.uleb128 0x1
 616 000f 10       		.uleb128 0x10
 617 0010 06       		.uleb128 0x6
 618 0011 00       		.byte	0x0
 619 0012 00       		.byte	0x0
 620 0013 02       		.uleb128 0x2
 621 0014 16       		.uleb128 0x16
 622 0015 00       		.byte	0x0
 623 0016 03       		.uleb128 0x3
 624 0017 08       		.uleb128 0x8
 625 0018 3A       		.uleb128 0x3a
 626 0019 0B       		.uleb128 0xb
 627 001a 3B       		.uleb128 0x3b
 628 001b 0B       		.uleb128 0xb
 629 001c 49       		.uleb128 0x49
 630 001d 13       		.uleb128 0x13
 631 001e 00       		.byte	0x0
 632 001f 00       		.byte	0x0
 633 0020 03       		.uleb128 0x3
 634 0021 24       		.uleb128 0x24
 635 0022 00       		.byte	0x0
 636 0023 0B       		.uleb128 0xb
 637 0024 0B       		.uleb128 0xb
 638 0025 3E       		.uleb128 0x3e
 639 0026 0B       		.uleb128 0xb
 640 0027 03       		.uleb128 0x3
 641 0028 0E       		.uleb128 0xe
 642 0029 00       		.byte	0x0
 643 002a 00       		.byte	0x0
 644 002b 04       		.uleb128 0x4
 645 002c 24       		.uleb128 0x24
 646 002d 00       		.byte	0x0
 647 002e 0B       		.uleb128 0xb
 648 002f 0B       		.uleb128 0xb
 649 0030 3E       		.uleb128 0x3e
 650 0031 0B       		.uleb128 0xb
 651 0032 03       		.uleb128 0x3
 652 0033 08       		.uleb128 0x8
 653 0034 00       		.byte	0x0
 654 0035 00       		.byte	0x0
 655 0036 05       		.uleb128 0x5
 656 0037 24       		.uleb128 0x24
 657 0038 00       		.byte	0x0
 658 0039 0B       		.uleb128 0xb
 659 003a 0B       		.uleb128 0xb
 660 003b 3E       		.uleb128 0x3e
 661 003c 0B       		.uleb128 0xb
 662 003d 00       		.byte	0x0
 663 003e 00       		.byte	0x0
 664 003f 06       		.uleb128 0x6
 665 0040 2E       		.uleb128 0x2e
 666 0041 01       		.byte	0x1
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 17


 667 0042 3F       		.uleb128 0x3f
 668 0043 0C       		.uleb128 0xc
 669 0044 03       		.uleb128 0x3
 670 0045 0E       		.uleb128 0xe
 671 0046 3A       		.uleb128 0x3a
 672 0047 0B       		.uleb128 0xb
 673 0048 3B       		.uleb128 0x3b
 674 0049 0B       		.uleb128 0xb
 675 004a 27       		.uleb128 0x27
 676 004b 0C       		.uleb128 0xc
 677 004c 49       		.uleb128 0x49
 678 004d 13       		.uleb128 0x13
 679 004e 11       		.uleb128 0x11
 680 004f 01       		.uleb128 0x1
 681 0050 12       		.uleb128 0x12
 682 0051 01       		.uleb128 0x1
 683 0052 40       		.uleb128 0x40
 684 0053 06       		.uleb128 0x6
 685 0054 01       		.uleb128 0x1
 686 0055 13       		.uleb128 0x13
 687 0056 00       		.byte	0x0
 688 0057 00       		.byte	0x0
 689 0058 07       		.uleb128 0x7
 690 0059 34       		.uleb128 0x34
 691 005a 00       		.byte	0x0
 692 005b 03       		.uleb128 0x3
 693 005c 0E       		.uleb128 0xe
 694 005d 3A       		.uleb128 0x3a
 695 005e 0B       		.uleb128 0xb
 696 005f 3B       		.uleb128 0x3b
 697 0060 0B       		.uleb128 0xb
 698 0061 49       		.uleb128 0x49
 699 0062 13       		.uleb128 0x13
 700 0063 02       		.uleb128 0x2
 701 0064 06       		.uleb128 0x6
 702 0065 00       		.byte	0x0
 703 0066 00       		.byte	0x0
 704 0067 08       		.uleb128 0x8
 705 0068 34       		.uleb128 0x34
 706 0069 00       		.byte	0x0
 707 006a 03       		.uleb128 0x3
 708 006b 0E       		.uleb128 0xe
 709 006c 3A       		.uleb128 0x3a
 710 006d 0B       		.uleb128 0xb
 711 006e 3B       		.uleb128 0x3b
 712 006f 0B       		.uleb128 0xb
 713 0070 49       		.uleb128 0x49
 714 0071 13       		.uleb128 0x13
 715 0072 02       		.uleb128 0x2
 716 0073 0A       		.uleb128 0xa
 717 0074 00       		.byte	0x0
 718 0075 00       		.byte	0x0
 719 0076 09       		.uleb128 0x9
 720 0077 34       		.uleb128 0x34
 721 0078 00       		.byte	0x0
 722 0079 03       		.uleb128 0x3
 723 007a 0E       		.uleb128 0xe
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 18


 724 007b 3A       		.uleb128 0x3a
 725 007c 0B       		.uleb128 0xb
 726 007d 3B       		.uleb128 0x3b
 727 007e 0B       		.uleb128 0xb
 728 007f 49       		.uleb128 0x49
 729 0080 13       		.uleb128 0x13
 730 0081 00       		.byte	0x0
 731 0082 00       		.byte	0x0
 732 0083 0A       		.uleb128 0xa
 733 0084 01       		.uleb128 0x1
 734 0085 01       		.byte	0x1
 735 0086 49       		.uleb128 0x49
 736 0087 13       		.uleb128 0x13
 737 0088 01       		.uleb128 0x1
 738 0089 13       		.uleb128 0x13
 739 008a 00       		.byte	0x0
 740 008b 00       		.byte	0x0
 741 008c 0B       		.uleb128 0xb
 742 008d 21       		.uleb128 0x21
 743 008e 00       		.byte	0x0
 744 008f 49       		.uleb128 0x49
 745 0090 13       		.uleb128 0x13
 746 0091 2F       		.uleb128 0x2f
 747 0092 0B       		.uleb128 0xb
 748 0093 00       		.byte	0x0
 749 0094 00       		.byte	0x0
 750 0095 0C       		.uleb128 0xc
 751 0096 01       		.uleb128 0x1
 752 0097 01       		.byte	0x1
 753 0098 49       		.uleb128 0x49
 754 0099 13       		.uleb128 0x13
 755 009a 00       		.byte	0x0
 756 009b 00       		.byte	0x0
 757 009c 00       		.byte	0x0
 758              		.section	.debug_pubnames,"",%progbits
 759 0000 1D000000 		.4byte	0x1d
 760 0004 0200     		.2byte	0x2
 761 0006 00000000 		.4byte	.Ldebug_info0
 762 000a 1A010000 		.4byte	0x11a
 763 000e 8B000000 		.4byte	0x8b
 764 0012 74657374 		.ascii	"testEEPROM\000"
 764      45455052 
 764      4F4D00
 765 001d 00000000 		.4byte	0x0
 766              		.section	.debug_aranges,"",%progbits
 767 0000 1C000000 		.4byte	0x1c
 768 0004 0200     		.2byte	0x2
 769 0006 00000000 		.4byte	.Ldebug_info0
 770 000a 04       		.byte	0x4
 771 000b 00       		.byte	0x0
 772 000c 0000     		.2byte	0x0
 773 000e 0000     		.2byte	0x0
 774 0010 00000000 		.4byte	.Ltext0
 775 0014 58020000 		.4byte	.Letext0-.Ltext0
 776 0018 00000000 		.4byte	0x0
 777 001c 00000000 		.4byte	0x0
 778              		.section	.debug_str,"MS",%progbits,1
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 19


 779              	.LASF6:
 780 0000 6C6F6E67 		.ascii	"long long int\000"
 780      206C6F6E 
 780      6720696E 
 780      7400
 781              	.LASF10:
 782 000e 65657072 		.ascii	"eepromTestResultOK\000"
 782      6F6D5465 
 782      73745265 
 782      73756C74 
 782      4F4B00
 783              	.LASF2:
 784 0021 756E7369 		.ascii	"unsigned int\000"
 784      676E6564 
 784      20696E74 
 784      00
 785              	.LASF11:
 786 002e 74657374 		.ascii	"testString1\000"
 786      53747269 
 786      6E673100 
 787              	.LASF12:
 788 003a 74657374 		.ascii	"testString2\000"
 788      53747269 
 788      6E673200 
 789              	.LASF18:
 790 0046 6572726F 		.ascii	"errorCode\000"
 790      72436F64 
 790      6500
 791              	.LASF14:
 792 0050 474E5520 		.ascii	"GNU C 4.2.2\000"
 792      4320342E 
 792      322E3200 
 793              	.LASF9:
 794 005c 6C6F6E67 		.ascii	"long long unsigned int\000"
 794      206C6F6E 
 794      6720756E 
 794      7369676E 
 794      65642069 
 795              	.LASF13:
 796 0073 74657374 		.ascii	"testBuf\000"
 796      42756600 
 797              	.LASF17:
 798 007b 74657374 		.ascii	"testEEPROM\000"
 798      45455052 
 798      4F4D00
 799              	.LASF0:
 800 0086 756E7369 		.ascii	"unsigned char\000"
 800      676E6564 
 800      20636861 
 800      7200
 801              	.LASF15:
 802 0094 65657072 		.ascii	"eepromTest.c\000"
 802      6F6D5465 
 802      73742E63 
 802      00
 803              	.LASF8:
 804 00a1 63686172 		.ascii	"char\000"
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 20


 804      00
 805              	.LASF5:
 806 00a6 6C6F6E67 		.ascii	"long int\000"
 806      20696E74 
 806      00
 807              	.LASF7:
 808 00af 6C6F6E67 		.ascii	"long unsigned int\000"
 808      20756E73 
 808      69676E65 
 808      6420696E 
 808      7400
 809              	.LASF1:
 810 00c1 73686F72 		.ascii	"short unsigned int\000"
 810      7420756E 
 810      7369676E 
 810      65642069 
 810      6E7400
 811              	.LASF3:
 812 00d4 7369676E 		.ascii	"signed char\000"
 812      65642063 
 812      68617200 
 813              	.LASF16:
 814 00e0 2F637967 		.ascii	"/cygdrive/c/Users/Anders/Fr\345n Gamla Datorn/Mina "
 814      64726976 
 814      652F632F 
 814      55736572 
 814      732F416E 
 815 0110 646F6B75 		.ascii	"dokument/Embedded Artists/Products/Education boards"
 815      6D656E74 
 815      2F456D62 
 815      65646465 
 815      64204172 
 816 0143 2F4C5043 		.ascii	"/LPC2138 EDU/testPrograms/productionTest\000"
 816      32313338 
 816      20454455 
 816      2F746573 
 816      7450726F 
 817              	.LASF4:
 818 016c 73686F72 		.ascii	"short int\000"
 818      7420696E 
 818      7400
 819              		.ident	"GCC: (GNU) 4.2.2"
ARM GAS  /cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 eepromTest.c
/cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s:1      .text:00000000 $t
/cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s:65     .text:00000000 testEEPROM
/cygdrive/c/Users/Anders/AppData/Local/Temp/ccJzgnhA.s:373    .text:0000021c $d

UNDEFINED SYMBOLS
memcpy
eepromWrite
simplePrintf
eepromPoll
eepromPageRead
strlen
